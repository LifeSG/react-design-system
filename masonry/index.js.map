{"version":3,"file":"index.js","sources":["../../src/spec/media-spec.ts","../../src/media/media.ts","../../src/masonry/masonry.style.tsx","../../src/masonry/masonry.tsx"],"sourcesContent":["import { MediaWidth } from \"../media/types\";\n\nexport const MediaWidths: MediaWidth = {\n    mobileS: 320,\n    mobileM: 375,\n    mobileL: 480,\n    tablet: 1199,\n    desktopM: 1399,\n    desktopL: 1999,\n    desktop4k: 3840,\n};\n","import { MediaWidths as MediaWidthsSpec } from \"../spec/media-spec\";\nimport { MediaType, MediaWidth } from \"./types\";\n\n// =============================================================================\n// HELPER FUNCTION\n// =============================================================================\nconst getMediaQuerySpec = (type: \"max-width\" | \"min-width\") => {\n    return Object.keys(MediaWidthsSpec).reduce((accumulator, key) => {\n        const mediaWidth = MediaWidthsSpec[key as keyof MediaWidth];\n        accumulator[\n            key as keyof MediaType\n        ] = `@media screen and (${type}: ${mediaWidth}px)`;\n\n        return accumulator;\n    }, {} as MediaType);\n};\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\nexport const MediaQuery = {\n    MaxWidth: getMediaQuerySpec(\"max-width\"),\n    MinWidth: getMediaQuerySpec(\"min-width\"),\n};\n\nexport const MediaWidths = MediaWidthsSpec;\n","import styled, { css } from \"styled-components\";\nimport { MediaQuery } from \"../media\";\nimport { MasonryGridProps, MasonryTileProps } from \"./types\";\n\n// =============================================================================\n// STYLE INTERFACE\n// =============================================================================\n\ntype GridStyleProps = Omit<MasonryGridProps, \"children\">;\ntype TileStyleProps = Omit<MasonryTileProps, \"children\">;\n\n// =============================================================================\n// STYLING\n// =============================================================================\nexport const GridContainer = styled.div<GridStyleProps>`\n    margin-top: 2.5rem;\n    display: grid;\n    align-items: center;\n    width: 100%;\n\n    ${(props) => {\n        const { numOfCols } = props;\n        const colsToUse = numOfCols.lg || numOfCols.md;\n        const numOfSmCols = numOfCols.sm\n            ? numOfCols.sm <= 2\n                ? numOfCols.sm\n                : 2\n            : undefined;\n\n        const mdColsDefault = numOfCols.md || numOfCols.sm || 2;\n\n        return css`\n            grid-template-columns: repeat(${colsToUse || \"auto-fill\"}, 1fr);\n            gap: 2rem 2rem;\n            justify-items: stretch;\n\n            ${MediaQuery.MaxWidth.tablet} {\n                grid-template-columns: repeat(\n                    ${numOfCols.md || numOfCols.sm || \"auto-fill\"},\n                    minmax(calc(${100 / mdColsDefault}% - 2rem), 1fr)\n                );\n            }\n\n            ${MediaQuery.MaxWidth.mobileL} {\n                grid-template-columns: repeat(\n                    ${numOfSmCols || \"auto-fill\"},\n                    minmax(calc(${100 / (numOfSmCols || 1)}% - 2rem), 1fr)\n                );\n            }\n        `;\n    }}\n`;\n\nexport const TileContainer = styled.div<TileStyleProps>`\n    position: relative;\n    ${(props) => {\n        const { startLg, colsLg, startMd, colsMd, startSm, colsSm } = props;\n\n        return css`\n            grid-column: ${startLg || startMd || \"auto\"} / span\n                ${colsLg || colsMd || 1};\n\n            ${MediaQuery.MaxWidth.tablet} {\n                grid-column: ${startMd || startSm || \"auto\"} / span\n                    ${colsMd || colsSm || 1};\n            }\n\n            ${MediaQuery.MaxWidth.mobileL} {\n                grid-column: ${startSm || \"auto\"} / span ${colsSm || 1};\n            }\n        `;\n    }}\n`;\n","import React from \"react\";\nimport { GridContainer, TileContainer } from \"./masonry.style\";\nimport { MasonryGridProps, MasonryTileProps } from \"./types\";\n\n// =============================================================================\n// GRID\n// =============================================================================\nconst GridComponent = (\n    props: MasonryGridProps,\n    ref: React.Ref<HTMLDivElement>\n): JSX.Element => {\n    const { children, ...otherProps } = props;\n\n    return (\n        <GridContainer ref={ref} {...otherProps}>\n            {children}\n        </GridContainer>\n    );\n};\n\n// =============================================================================\n// TILE\n// =============================================================================\nconst TileComponent = (\n    props: MasonryTileProps,\n    ref: React.Ref<HTMLDivElement>\n): JSX.Element => {\n    const { children, ...otherProps } = props;\n\n    return (\n        <TileContainer ref={ref} {...otherProps}>\n            {children}\n        </TileContainer>\n    );\n};\n\n// =============================================================================\n// EXPORTABLE\n// =============================================================================\nexport const Masonry = {\n    Grid: React.forwardRef(GridComponent),\n    Tile: React.forwardRef(TileComponent),\n};\n"],"names":["MediaWidths","mobileS","mobileM","mobileL","tablet","desktopM","desktopL","desktop4k","getMediaQuerySpec","type","Object","keys","MediaWidthsSpec","reduce","accumulator","key","mediaWidth","MediaQuery","GridContainer","styled","div","props","numOfCols","colsToUse","lg","md","numOfSmCols","sm","undefined","mdColsDefault","css","TileContainer","startLg","colsLg","startMd","colsMd","startSm","colsSm","Masonry","Grid","React","forwardRef","ref","children","otherProps","_jsx","Tile"],"mappings":"wGAEO,MAAMA,EAA0B,CACnCC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,OAAQ,KACRC,SAAU,KACVC,SAAU,KACVC,UAAW,MCHTC,EAAqBC,GAChBC,OAAOC,KAAKC,GAAiBC,QAAO,CAACC,EAAaC,KACrD,MAAMC,EAAaJ,EAAgBG,GAKnC,OAJAD,EACIC,GACA,sBAAsBN,MAASO,OAE5BF,IACR,IAMMG,EACCT,EAAkB,aCPnBU,GDQCV,EAAkB,aCRHW,EAAOC,GAAmB;;;;;;MAMhDC,IACC,MAAMC,UAAEA,GAAcD,EAChBE,EAAYD,EAAUE,IAAMF,EAAUG,GACtCC,EAAcJ,EAAUK,GACxBL,EAAUK,IAAM,EACZL,EAAUK,GACV,OACJC,EAEAC,EAAgBP,EAAUG,IAAMH,EAAUK,IAAM,EAEtD,OAAOG,CAAG;4CAC0BP,GAAa;;;;cAI3CN,EAAoBb;;sBAEZkB,EAAUG,IAAMH,EAAUK,IAAM;kCACpB,IAAME;;;;cAI1BZ,EAAoBd;;sBAEZuB,GAAe;kCACH,KAAOA,GAAe;;;;GAO3CK,EAAgBZ,EAAOC,GAAmB;;MAEhDC,IACC,MAAMW,QAAEA,EAAOC,OAAEA,EAAMC,QAAEA,EAAOC,OAAEA,EAAMC,QAAEA,EAAOC,OAAEA,GAAWhB,EAE9D,OAAOS,CAAG;2BACSE,GAAWE,GAAW;kBAC/BD,GAAUE,GAAU;;cAExBlB,EAAoBb;+BACH8B,GAAWE,GAAW;sBAC/BD,GAAUE,GAAU;;;cAG5BpB,EAAoBd;+BACHiC,GAAW,iBAAiBC,GAAU;;;EC7BxDC,EAAU,CACnBC,KAAMC,EAAMC,YAjCM,CAClBpB,EACAqB,KAEA,MAAMC,SAAEA,KAAaC,GAAevB,EAEpC,OACIwB,EAAC3B,EAAa,CAACwB,IAAKA,KAASE,EAAUD,SAClCA,OA0BTG,KAAMN,EAAMC,YAlBM,CAClBpB,EACAqB,KAEA,MAAMC,SAAEA,KAAaC,GAAevB,EAEpC,OACIwB,EAACd,EAAa,CAACW,IAAKA,KAASE,EAAUD,SAClCA"}