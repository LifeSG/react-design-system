{"version":3,"file":"index.js","sources":["../../src/overlay/overlay.styles.tsx","../../src/overlay/overlay.tsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\nimport { StyleProps } from \"./types\";\n\nconst getBackdropFilter = (blur: boolean) => {\n    let styleString = \"\";\n\n    if (blur) {\n        styleString += \"blur(10px)\";\n    }\n\n    return styleString.length > 0 ? styleString : \"none\";\n};\n\nexport const Root = styled.div<StyleProps>`\n    position: fixed;\n    left: 0;\n    top: 0;\n    height: 0;\n    width: 0;\n    visibility: hidden;\n    z-index: ${(props) => {\n        return props.zIndex || (props.$stacked ? 99999 : 99998);\n    }};\n\n    ${(props) => {\n        if (props.$show) {\n            return css`\n                height: 100%;\n                width: 100vw;\n                visibility: visible;\n            `;\n        }\n    }}\n`;\n\nexport const Wrapper = styled.div<StyleProps>`\n    position: absolute;\n    left: 0;\n    top: 0;\n    background-color: rgba(5, 1, 1, ${(props) => props.$backgroundOpacity});\n    backdrop-filter: ${(props) => getBackdropFilter(props.$backgroundBlur)};\n    transition: opacity 200ms ease;\n\n    ${(props) => {\n        let customStyles = \"\";\n        if (props.$show) {\n            customStyles += css`\n                visibility: visible;\n                opacity: 1;\n                pointer-events: auto;\n                height: 100%;\n                width: 100vw;\n            `;\n        } else {\n            customStyles += css`\n                visibility: hidden;\n                opacity: 0;\n                transition-delay: ${props.$disableTransition ? \"0ms\" : \"400ms\"};\n                pointer-events: none;\n                height: 0;\n                width: 0;\n            `;\n        }\n        if (props.$disableTransition) {\n            customStyles += css`\n                transition: none;\n            `;\n        }\n\n        return customStyles;\n    }}\n`;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { OverlayProps } from \"./types\";\nimport { Root, Wrapper } from \"./overlay.styles\";\n\nexport const Overlay = ({\n    show = false,\n    rootId,\n    onOverlayClick,\n    children,\n    backgroundOpacity,\n    backgroundBlur = true,\n    disableTransition = false,\n    enableOverlayClick = false,\n    zIndex,\n    id,\n}: OverlayProps): JSX.Element | null => {\n    // =============================================================================\n    // CONST, STATE, REF\n    // =============================================================================\n    const [rootElement, setRootElement] = useState<HTMLElement | null>(null);\n    const [isStacked, _setIsStacked] = useState<boolean>();\n\n    const stacked = useRef<boolean>();\n    const mounted = useRef<boolean>(false);\n\n    const childRef = useRef<HTMLDivElement>(null);\n    const childWithRef =\n        children && React.cloneElement(children, { ref: childRef });\n\n    const overlayRootId = id\n        ? `lifesg-ds-overlay-root-${id}`\n        : \"lifesg-ds-overlay-root\";\n\n    // =============================================================================\n    // EFFECTS\n    // =============================================================================\n    useEffect(() => {\n        const isMounted = mounted.current === true;\n        if (!isMounted) {\n            mounted.current = true;\n        }\n\n        if (show) {\n            const isStacked = checkIfStacked();\n            setStacked(isStacked);\n\n            if (!isStacked) {\n                const timerId = setTimeout(() => {\n                    applyBodyStyleClass(\"add\");\n                }, 200); // Allow overlay animations to complete\n                return () => clearTimeout(timerId);\n            }\n        } else {\n            // skip if the component hasn't mounted yet\n            if (!isMounted) {\n                return;\n            }\n\n            /**\n             * Here we have to used the ref value to know if it is stacked\n             * rather than checking for the presence of the overlay class\n             * on <body>\n             */\n            if (!stacked.current) {\n                const timerId = setTimeout(() => {\n                    applyBodyStyleClass(\"remove\");\n                }, 200); // Allow overlay animations to complete\n                return () => clearTimeout(timerId);\n            }\n        }\n    }, [show]);\n\n    useEffect(() => {\n        setRootElement(getRootElement());\n\n        /**\n         * Only add stylesheet for a non-stacked overlay\n         */\n        const isStacked = checkIfStacked();\n        setStacked(isStacked);\n        if (!isStacked) addStylesheetForDocumentBody();\n\n        return () => {\n            applyBodyStyleClass(\"remove\");\n        };\n    }, []);\n\n    // =============================================================================\n    // REF FUNCTIONS\n    // =============================================================================\n    const setStacked = (data: boolean) => {\n        stacked.current = data;\n        _setIsStacked(data);\n    };\n\n    // =============================================================================\n    // HELPER FUNCTIONS\n    // =============================================================================\n    const getRootElement = (): HTMLElement | null => {\n        if (document && rootId) {\n            return document.getElementById(rootId);\n        } else if (document) {\n            // If rootId not specified, we'll use body\n            return document.body;\n        } else {\n            return null;\n        }\n    };\n\n    const checkIfStacked = () => {\n        /**\n         * Check if the body style was altered before. If it was, then this is\n         * a stacked overlay\n         */\n        return document.body.classList.contains(OVERLAY_OPEN_CLASSNAME);\n    };\n\n    const addStylesheetForDocumentBody = () => {\n        /**\n         * This stylesheet is to manipulate the <body>. We only add once\n         */\n        if (!document.getElementById(STYLESHEET_ID)) {\n            const overlayStyleSheet = document.createElement(\"style\");\n            overlayStyleSheet.id = STYLESHEET_ID;\n\n            const documentWidth = document.documentElement.clientWidth;\n            const windowWidth = window.innerWidth;\n            const scrollBarWidth = windowWidth - documentWidth;\n\n            overlayStyleSheet.innerHTML = `\n\t\t\t\t.${OVERLAY_OPEN_CLASSNAME} {\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\tpadding-right: ${scrollBarWidth}px !important;\n\t\t\t\t\t-ms-overflow-style: none;\n\t\t\t\t\tscrollbar-width: none;\n\t\t\t\t}\n\n\t\t\t\t.${OVERLAY_OPEN_CLASSNAME}::-webkit-scrollbar {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t`;\n\n            document.body.appendChild(overlayStyleSheet);\n        }\n    };\n\n    /**\n     * This sets the style of <body> to hide the scrollbar\n     */\n    const applyBodyStyleClass = (action: \"add\" | \"remove\") => {\n        const isOverlayStyleClassApplied = document.body.classList.contains(\n            OVERLAY_OPEN_CLASSNAME\n        );\n\n        if (action === \"add\" && !isOverlayStyleClassApplied) {\n            document.body.classList.add(OVERLAY_OPEN_CLASSNAME);\n        } else if (action === \"remove\" && isOverlayStyleClassApplied) {\n            document.body.classList.remove(OVERLAY_OPEN_CLASSNAME);\n        }\n    };\n\n    // =============================================================================\n    // EVENT HANDLERS\n    // =============================================================================\n    const handleWrapperClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        const modal = childRef.current?.firstChild;\n        if (modal && (modal as any).contains(event.target)) {\n            return;\n        } else if (onOverlayClick && enableOverlayClick) {\n            event.preventDefault();\n            onOverlayClick();\n        }\n    };\n\n    // =============================================================================\n    // RENDER\n    // =============================================================================\n    const renderWrapper = () => (\n        <Wrapper\n            data-testid={\"overlay-wrapper\"}\n            $show={show}\n            $backgroundOpacity={backgroundOpacity || (isStacked ? 0.5 : 0.8)}\n            $backgroundBlur={backgroundBlur}\n            $disableTransition={disableTransition}\n            $enableOverlayClick={enableOverlayClick}\n            onClick={handleWrapperClick}\n        >\n            {childWithRef}\n        </Wrapper>\n    );\n\n    const renderComponent = () => (\n        <Root\n            id={overlayRootId}\n            data-testid={overlayRootId}\n            $show={show}\n            zIndex={zIndex}\n            $stacked={isStacked}\n        >\n            {children && renderWrapper()}\n        </Root>\n    );\n\n    return rootElement\n        ? ReactDOM.createPortal(renderComponent(), rootElement)\n        : null;\n};\n\n// =============================================================================\n// CONSTANTS\n// =============================================================================\nconst STYLESHEET_ID = \"lifesg-ds-overlay-stylesheet\";\nconst OVERLAY_OPEN_CLASSNAME = \"lifesg-ds-overlay-open\";\n"],"names":["Root","styled","div","props","zIndex","$stacked","$show","css","Wrapper","$backgroundOpacity","blur","styleString","length","getBackdropFilter","$backgroundBlur","customStyles","$disableTransition","Overlay","show","rootId","onOverlayClick","children","backgroundOpacity","backgroundBlur","disableTransition","enableOverlayClick","id","rootElement","setRootElement","useState","isStacked","_setIsStacked","stacked","useRef","mounted","childRef","childWithRef","React","cloneElement","ref","overlayRootId","useEffect","isMounted","current","checkIfStacked","setStacked","timerId","setTimeout","applyBodyStyleClass","clearTimeout","getRootElement","addStylesheetForDocumentBody","data","document","getElementById","body","classList","contains","OVERLAY_OPEN_CLASSNAME","STYLESHEET_ID","overlayStyleSheet","createElement","documentWidth","documentElement","clientWidth","scrollBarWidth","window","innerWidth","innerHTML","appendChild","action","isOverlayStyleClassApplied","remove","add","handleWrapperClick","event","modal","_a","firstChild","target","preventDefault","ReactDOM","createPortal","_jsx","Object","assign","$enableOverlayClick","onClick"],"mappings":"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"}